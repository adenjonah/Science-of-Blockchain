Lecture3.txt
----------------

TITLE: SMR with Crash Faults in Synchrony

OVERVIEW:
- This lecture covers how to solve State Machine Replication (SMR) when:
  - Fault model: Crash faults (a node may stop working permanently).
  - Network model: Synchronous (bounded message delays).

----------------
1. SMR BASICS
   - **Goal**: Have all non-faulty nodes maintain a common (consistent) chain of blocks,
     and ensure that any transaction introduced by a non-faulty node is eventually included
     (liveness).
   - **Consistency**: No two non-faulty nodes end up with chains that diverge.
   - **Liveness**: If a transaction is known by at least one non-faulty node, it will
     eventually appear in everyone’s chain.

2. CRASH FAULTS VS. BYZANTINE FAULTS
   - **Crash faults**: A node may shut down and stop sending messages. It does not send
     malicious or incorrect data.
   - **Byzantine faults**: A node can behave arbitrarily (maliciously, incorrectly).
   - Crash faults are considered the "easier" failure mode.

3. SYNCHRONOUS VS. ASYNCHRONOUS NETWORKS
   - **Synchronous**: Known upper bound on message delays.
   - **Asynchronous**: No fixed limit on how long messages can take.

4. PROTOCOL A (INITIAL IDEA)
   - Time is divided into “views.” In each view, a single leader proposes a new block.
   - Leader sends the block to all nodes. Nodes append it if they receive it before the view ends.
   - **Problem**: If the leader crashes mid-broadcast (after sending to some but not all),
     different nodes may have different chains — violating consistency.

5. PROTOCOL B (REFINEMENT)
   - Splits each view into two phases (two time slots) to ensure the leader is fully “caught up.”
   - **Phase 1 (Catch-up)**:
     - All nodes send their current chains to the leader.
   - **Phase 2 (Proposal)**:
     - Leader picks the longest chain it received, appends a new block to it, and sends
       this updated chain to everyone.
     - Any node that receives this proposal updates its local chain.
   - **Why This Works**:
     - The leader always sees the most up-to-date chain before proposing a new block.
     - Even if the leader crashes after sending the chain to some nodes, all the chains
       that receive it are still extensions of a single common chain, so no fork arises.

6. CORRECTNESS OF PROTOCOL B
   - **Consistency**:
     - By induction: initially, all nodes share the same (empty or initial) chain.
     - In each view, the leader’s proposed chain extends the longest chain seen so far.
     - Therefore, all newly updated chains remain consistent with previous ones.
   - **Liveness**:
     - A transaction known to a non-faulty node will eventually be proposed when that node
       becomes leader (or is passed along to another leader in its chain data).
     - Hence, all non-faulty nodes will eventually adopt it.

7. LIMITATIONS & ASYNCHRONY
   - If messages can be arbitrarily delayed (asynchronous), a leader might not receive the
     latest chains before proposing. This can cause inconsistent views of the chain.
   - **FLP Impossibility (informal)**: In a purely asynchronous setting, even one crash
     fault can prevent guaranteed consensus (SMR).
   - **Workarounds**:
     1. Partial synchrony: A practical middle ground where eventually messages must be
        delivered in bounded time.
     2. Relax consistency: Allow small deviations in the chain (not covered in detail here).
     3. Randomized protocols: Introduce randomness to bypass FLP with high probability
        (less common in production).

----------------
KEY TAKEAWAYS:
1. Protocol B solves SMR with crash faults in a synchronous network.
2. Ensuring the leader is fully up-to-date prevents forks.
3. Asynchrony complicates consensus and requires additional ideas (partial synchrony,
   majority voting, or randomization).
4. Proofs are essential because these protocols run for a long time under diverse
   conditions.

----------------
