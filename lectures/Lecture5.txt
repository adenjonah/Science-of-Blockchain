Paxos/Raft with Byzantine Faults
--------------------------------

Next Challenge: Byzantine Faults

- Question: Is Protocol C still live and consistent with Byzantine faults?

Byzantine Validator Shenanigans:

1. Issue 1: Ignoring Read Quorum
    - A Byzantine leader could ignore the read quorum requirement and make an out-of-date proposal.
    - This could occur if the leader didn't receive chains from more than n/2 validators or chose to ignore them.
    - Consequence: An out-of-date proposal, if adopted, leads to a consistency violation.

2. Issue 2: Equivocation
    - A Byzantine leader could propose different chains to different validators (equivocation).
    - All proposals could be supported by acknowledgments from Byzantine validators.
    - Consequence: Leads to a consistency violation.

3. Issue 3: Misreporting Messages
    - A Byzantine validator could lie about messages received from other validators.
    - This could frame a non-faulty validator for the Byzantine validator's own misbehavior.
    - Solution: We will tackle this issue with cryptography.

Digital Signature Schemes in Blockchains
----------------------------------------

- Overview: One of the two most ubiquitous cryptographic primitives in blockchains (along with cryptographic hash functions).

- Applications:
    1. Transaction Authorization:
        - Allows a user of a blockchain to authorize a transaction (e.g., making a payment).
        - Fundamental to the vision of a shared computer in the sky.
    2. Validator Message Signing:
        - Allows validators of a blockchain protocol to sign their messages.
        - Used in most blockchain protocols for this purpose, with Bitcoin being a notable exception.

- Digital Signature Scheme:
    - Defined by three efficient algorithms:
        1. Key Generation Algorithm:
            - Maps a seed r to a (public key, private key) pair.
            - In some cases, the algorithm may generate r itself.
        2. Signing Algorithm:
            - Maps a message and a private key to a signature.
            - The signature depends on both the private key and the message being signed.
        3. Verification Algorithm:
            - Maps a message, signature, and public key to a boolean value.
            - Anyone who knows the public key can verify the correctness of an alleged signature.

- Ideal Signature Scheme:
    - Cannot produce valid signatures that you haven't already seen unless you know the private key.
    - Not literally true, as one could theoretically reverse engineer the private key from the public key by brute force.

- Security Assumptions:
    - The attacker is computationally bounded (polynomial time).
    - The secret key length is sufficiently long (so brute force is infeasible).
    - There is no way to forge signatures much faster than brute forcing the private key.
        - Ideally, this is related to a standard hardness assumption like the discrete logarithm problem.
    - There is a non-zero chance the attacker gets lucky.
    - Semi-formal DSS Security Statement:
        - No efficient algorithm can forge valid signatures, even after seeing many signed messages.

- Examples:
    - Digital Signature Scheme Example: RSA, where the public key is used to verify signatures and the private key is used to sign messages.
    - Byzantine Fault Example: In a distributed system, a node that sends conflicting information to different parts of the system to disrupt consensus.

The Partially Synchronous Model
-------------------------------

- Characteristics:
    - Shared global clock (timesteps = 0,1,2,3...)
    - Known upper bound on message delay (e.g., 100ms)
    - Unknown transition time GST (global stabilization time) from asynchrony to synchrony
        - Protocol must work no matter what GST is.

- Goals:
    - Consistency, always even pre-GST/under attacker.
    - Liveness soon after GST.
        - FLP impossibility result implies we need to give up one of consistency or liveness before GST (we give up liveness).

What is Possible with Byzantine Faults?
---------------------------------------

- Fact: Crash faults + partial synchrony - security threshold < 33%
    - No hope unless more than two-thirds of validators are non-faulty.

- Intuition:
    - Suppose we want to tolerate up to f Byzantine faults.
    - Liveliness requires the protocol to eventually finalize new transactions even if it has heard from only n-f validators.
    - Ambiguity between crashes and long message delays might mean that f of the n-f contributing validators are Byzantine.
    - To avoid being tricked, a strict majority of these n-f validators must be honest: (n-f)-f > f, i.e., f < n/3.

Toward Tendermint
------------------

Starting point: protocol C (kinda = Paxos/Raft)

Issue 1: could ignore read quorum
Issue 2: could equivocate (definition: propose different chains to different validators)
Issue 3: Byzantine validators could lie about messages received from other validators

Key Ideas in Tendermint
------------------------

Idea #1: Digital Signatures for Message Authentication
- Every validator must digitally sign every message it sends
- Example: If validator V1 sends a proposal, it includes signature Sig_V1(proposal)
- All validators know each other's:
  * Public keys (to verify signatures)
  * Unique IDs 
  * Network addresses
- This prevents impersonation attacks where a Byzantine validator pretends to be someone else

Understanding Quorum Intersection (Background):
- In Protocol C, we needed write quorums (>n/2) to overlap with read quorums (>n/2)
- Example: If 5 validators total, need at least 3 validators in each quorum
  * Write quorum: {V1, V2, V3}
  * Read quorum: {V2, V3, V4} 
  * They overlap at {V2, V3}, ensuring consistency

Idea #2: Larger Quorums for Byzantine Fault Tolerance
- Assume < n/3 validators can be Byzantine (necessary for security)
- Increase all quorum sizes from >n/2 to >2n/3
- Example with 9 validators (where up to 2 can be Byzantine):
  * Old quorum size: >4 validators
  * New quorum size: >6 validators
  * Any two quorums of size 7 must overlap in at least 5 validators
  * Even if 2 validators in the overlap are Byzantine, still have 3 honest ones

Key Property: Two-thirds quorums guarantee honest overlap
- If S and T are quorums where |S|, |T| > 2n/3:
  * They must overlap in >n/3 validators
  * At least one must be honest (since <n/3 are Byzantine)
- Example: With 12 validators (where â‰¤3 Byzantine)
  * Quorum 1: {V1...V8}  (8 validators)
  * Quorum 2: {V5...V12} (8 validators)
  * Overlap: {V5...V8}   (4 validators)
  * Even if 3 in overlap are Byzantine, still have 1 honest validator

Idea #3: Quorum Certificates (QCs) for Proposal Verification
- Instead of trusting the leader's read quorum:
  1. Leader makes proposal
  2. Each validator independently verifies proposal is up-to-date
  3. >2n/3 validators must sign to create a QC
  4. QC is stored in blockchain: Block1-QC1-Block2-QC2-Block3-QC3...

Example QC Formation:
1. Leader proposes Block4
2. Validators check their chains
3. If valid, they sign: Sig_Vi("Block4 is valid")
4. Once >2n/3 signatures collected, QC4 is formed
5. Block4-QC4 added to chain

Benefits:
- Byzantine leader can't trick validators with fake/old data
- Two conflicting proposals can't both get QCs in same view
- All validators can independently verify the chain's validity